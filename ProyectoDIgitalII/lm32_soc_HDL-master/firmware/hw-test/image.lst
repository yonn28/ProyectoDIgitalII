
image:     file format elf32-lm32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000764  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000004  00000764  00000764  000007b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000014  00000768  00000768  000007bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000084  0000077c  0000077c  000007d0  2**2
                  ALLOC
  4 .debug_abbrev 0000023a  00000000  00000000  000007d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007dc  00000000  00000000  00000a0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000065b  00000000  00000000  000011e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001d0  00000000  00000000  00001844  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000001f5  00000000  00000000  00001a14  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 00000206  00000000  00000000  00001c09  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 00000075  00000000  00000000  00001e0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000040  00000000  00000000  00001e84  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000320  00000000  00000000  00001ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000011  00000000  00000000  000021e4  2**0
                  CONTENTS, READONLY
 14 .debug_ranges 00000018  00000000  00000000  000021f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 b1 	calli 390 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 07 80 	ori gp,gp,0x780
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 07 7c 	ori r1,r1,0x77c
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 08 00 	ori r3,r3,0x800

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <main>:

#include "soc-hw.h"


int main()
{
 208:	37 9c ff f4 	addi sp,sp,-12
 20c:	5b 8b 00 0c 	sw (sp+12),r11
 210:	5b 8c 00 08 	sw (sp+8),r12
 214:	5b 9d 00 04 	sw (sp+4),ra
		gpio_set_out2(c);
		char d=GetByteTwo();
		gpio_set_out1(d);
		*/	
	
	int increaser=35;
 218:	34 0c 00 23 	mvi r12,35

	
	while(1){

		uart_putchar(0x30);//UART SIMBOL 0
 21c:	34 01 00 30 	mvi r1,48
 220:	f8 00 00 c2 	calli 528 <uart_putchar>
		uart_putchar(0x31);//UART SIMBOL 1
 224:	34 01 00 31 	mvi r1,49
 228:	f8 00 00 c0 	calli 528 <uart_putchar>
		uart_putchar(0x32);//UART SIMBOL 2
 22c:	34 01 00 32 	mvi r1,50
 230:	f8 00 00 be 	calli 528 <uart_putchar>
		uart_putchar(0x33);//UART SIMBOL 3
 234:	34 01 00 33 	mvi r1,51
 238:	f8 00 00 bc 	calli 528 <uart_putchar>
		uart_putchar(0x34);//UART SIMBOL 4
 23c:	34 01 00 34 	mvi r1,52
 240:	f8 00 00 ba 	calli 528 <uart_putchar>
		uart_putchar(0x35);//UART SIMBOL 5
 244:	34 01 00 35 	mvi r1,53
 248:	f8 00 00 b8 	calli 528 <uart_putchar>
		uart_putchar(0x36);//UART SIMBOL 6
 24c:	34 01 00 36 	mvi r1,54
 250:	f8 00 00 b6 	calli 528 <uart_putchar>
		uart_putchar(0x37);//UART SIMBOL 7
 254:	34 01 00 37 	mvi r1,55
 258:	f8 00 00 b4 	calli 528 <uart_putchar>
		uart_putchar(0x38);//UART SIMBOL 8
 25c:	34 01 00 38 	mvi r1,56
 260:	f8 00 00 b2 	calli 528 <uart_putchar>
		uart_putchar(0x39);//UART SIMBOL 9
 264:	34 01 00 39 	mvi r1,57
 268:	f8 00 00 b0 	calli 528 <uart_putchar>
		
		//uart_putchar(0x0B);//simbolo +
		//uart_putchar(0x10);
		

		uart_putchar(0x41);//UART A
 26c:	34 01 00 41 	mvi r1,65
 270:	f8 00 00 ae 	calli 528 <uart_putchar>
		uart_putchar(0x42);//UART B
 274:	34 01 00 42 	mvi r1,66
 278:	f8 00 00 ac 	calli 528 <uart_putchar>
		uart_putchar(0x43);//UART C
 27c:	34 01 00 43 	mvi r1,67
 280:	f8 00 00 aa 	calli 528 <uart_putchar>
		uart_putchar(0x44);//UART D
 284:	34 01 00 44 	mvi r1,68
 288:	f8 00 00 a8 	calli 528 <uart_putchar>
		uart_putchar(0x45);//UART E
 28c:	34 01 00 45 	mvi r1,69
 290:	f8 00 00 a6 	calli 528 <uart_putchar>
		uart_putchar(0x46);//UART F
 294:	34 01 00 46 	mvi r1,70
 298:	f8 00 00 a4 	calli 528 <uart_putchar>
		uart_putchar(0x47);//UART G
 29c:	34 01 00 47 	mvi r1,71
 2a0:	f8 00 00 a2 	calli 528 <uart_putchar>
		uart_putchar(0x48);//UART H
 2a4:	34 01 00 48 	mvi r1,72
 2a8:	f8 00 00 a0 	calli 528 <uart_putchar>
		uart_putchar(0x49);//UART I
 2ac:	34 01 00 49 	mvi r1,73
 2b0:	f8 00 00 9e 	calli 528 <uart_putchar>
		uart_putchar(0x4A);//UART J
 2b4:	34 01 00 4a 	mvi r1,74
 2b8:	f8 00 00 9c 	calli 528 <uart_putchar>
		uart_putchar(0x4B);//UART K
 2bc:	34 01 00 4b 	mvi r1,75
 2c0:	f8 00 00 9a 	calli 528 <uart_putchar>
		uart_putchar(0x4C);//UART L
 2c4:	34 01 00 4c 	mvi r1,76
 2c8:	f8 00 00 98 	calli 528 <uart_putchar>
		uart_putchar(0x4D);//UART M
 2cc:	34 01 00 4d 	mvi r1,77
 2d0:	f8 00 00 96 	calli 528 <uart_putchar>
		uart_putchar(0x4E);//UART N
 2d4:	34 01 00 4e 	mvi r1,78
 2d8:	f8 00 00 94 	calli 528 <uart_putchar>
		uart_putchar(0x4F);//UART O
 2dc:	34 01 00 4f 	mvi r1,79
 2e0:	f8 00 00 92 	calli 528 <uart_putchar>
		uart_putchar(0x50);//UART P
 2e4:	34 01 00 50 	mvi r1,80
 2e8:	f8 00 00 90 	calli 528 <uart_putchar>
		uart_putchar(0x51);//UART Q	
 2ec:	34 01 00 51 	mvi r1,81
 2f0:	f8 00 00 8e 	calli 528 <uart_putchar>
		uart_putchar(0x52);//UART R
 2f4:	34 01 00 52 	mvi r1,82
 2f8:	f8 00 00 8c 	calli 528 <uart_putchar>
		uart_putchar(0x53);//UART S
 2fc:	34 01 00 53 	mvi r1,83
 300:	f8 00 00 8a 	calli 528 <uart_putchar>
		uart_putchar(0x54);//UART T
 304:	34 01 00 54 	mvi r1,84
 308:	f8 00 00 88 	calli 528 <uart_putchar>
		uart_putchar(0x55);//UART U
 30c:	34 01 00 55 	mvi r1,85
 310:	f8 00 00 86 	calli 528 <uart_putchar>
		uart_putchar(0x56);//UART V
 314:	34 01 00 56 	mvi r1,86
 318:	f8 00 00 84 	calli 528 <uart_putchar>
		uart_putchar(0x57);//UART W
 31c:	34 01 00 57 	mvi r1,87
 320:	f8 00 00 82 	calli 528 <uart_putchar>
		uart_putchar(0x58);//UART X
 324:	34 01 00 58 	mvi r1,88
 328:	f8 00 00 80 	calli 528 <uart_putchar>
		uart_putchar(0x59);//UART Y
 32c:	34 01 00 59 	mvi r1,89
 330:	f8 00 00 7e 	calli 528 <uart_putchar>
		uart_putchar(0x5A);//UART Z	
 334:	34 01 00 5a 	mvi r1,90
 338:	f8 00 00 7c 	calli 528 <uart_putchar>

		uart_putchar(0x0A);//supouse skip line
 33c:	34 01 00 0a 	mvi r1,10
 340:	f8 00 00 7a 	calli 528 <uart_putchar>
 344:	34 0b 00 00 	mvi r11,0
		int i;
		while(i<increaser){
			i=i+1;
 348:	35 6b 00 01 	addi r11,r11,1
			uart_putchar(0x08);//retroceso
 34c:	34 01 00 08 	mvi r1,8
 350:	f8 00 00 76 	calli 528 <uart_putchar>
		uart_putchar(0x59);//UART Y
		uart_putchar(0x5A);//UART Z	

		uart_putchar(0x0A);//supouse skip line
		int i;
		while(i<increaser){
 354:	49 8b ff fd 	bg r12,r11,348 <main+0x140>
			i=i+1;
			uart_putchar(0x08);//retroceso
		}
		i=0;
		increaser=increaser+1;
 358:	35 8c 00 01 	addi r12,r12,1
		
	}
 35c:	e3 ff ff b0 	bi 21c <main+0x14>

00000360 <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
 360:	c3 a0 00 00 	ret

00000364 <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 364:	78 01 00 00 	mvhi r1,0x0
 368:	38 21 07 fc 	ori r1,r1,0x7fc
 36c:	28 23 00 00 	lw r3,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 370:	78 02 00 00 	mvhi r2,0x0
 374:	38 42 07 6c 	ori r2,r2,0x76c
 378:	28 42 00 00 	lw r2,(r2+0)

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 37c:	34 63 00 01 	addi r3,r3,1
 380:	58 23 00 00 	sw (r1+0),r3
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 384:	34 01 00 0e 	mvi r1,14
 388:	58 41 00 00 	sw (r2+0),r1
}
 38c:	c3 a0 00 00 	ret

00000390 <irq_handler>:
void isr_null()
{
}

void irq_handler(uint32_t pending)
{
 390:	37 9c ff f0 	addi sp,sp,-16
 394:	5b 8b 00 10 	sw (sp+16),r11
 398:	5b 8c 00 0c 	sw (sp+12),r12
 39c:	5b 8d 00 08 	sw (sp+8),r13
 3a0:	5b 9d 00 04 	sw (sp+4),ra
 3a4:	78 0b 00 00 	mvhi r11,0x0
 3a8:	39 6b 07 7c 	ori r11,r11,0x77c
 3ac:	b8 20 60 00 	mv r12,r1
 */
void isr_null()
{
}

void irq_handler(uint32_t pending)
 3b0:	35 6d 00 80 	addi r13,r11,128
 3b4:	e0 00 00 04 	bi 3c4 <irq_handler+0x34>
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 3b8:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 3bc:	45 6d 00 08 	be r11,r13,3dc <irq_handler+0x4c>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
 3c0:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 3c4:	21 81 00 01 	andi r1,r12,0x1
 3c8:	44 20 ff fc 	be r1,r0,3b8 <irq_handler+0x28>
 3cc:	29 61 00 00 	lw r1,(r11+0)
 3d0:	35 6b 00 04 	addi r11,r11,4
 3d4:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 3d8:	5d 6d ff fa 	bne r11,r13,3c0 <irq_handler+0x30>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}
 3dc:	2b 9d 00 04 	lw ra,(sp+4)
 3e0:	2b 8b 00 10 	lw r11,(sp+16)
 3e4:	2b 8c 00 0c 	lw r12,(sp+12)
 3e8:	2b 8d 00 08 	lw r13,(sp+8)
 3ec:	37 9c 00 10 	addi sp,sp,16
 3f0:	c3 a0 00 00 	ret

000003f4 <isr_init>:

void isr_init()
{
 3f4:	78 01 00 00 	mvhi r1,0x0
 3f8:	78 02 00 00 	mvhi r2,0x0
 3fc:	38 21 07 7c 	ori r1,r1,0x77c
 400:	38 42 03 60 	ori r2,r2,0x360
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}

void isr_init()
 404:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
 408:	58 22 00 00 	sw (r1+0),r2
 40c:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
 410:	5c 23 ff fe 	bne r1,r3,408 <isr_init+0x14>
		isr_table[i] = &isr_null;
}
 414:	c3 a0 00 00 	ret

00000418 <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 418:	78 03 00 00 	mvhi r3,0x0
 41c:	3c 21 00 02 	sli r1,r1,2
 420:	38 63 07 7c 	ori r3,r3,0x77c
 424:	b4 61 18 00 	add r3,r3,r1
 428:	58 62 00 00 	sw (r3+0),r2
}
 42c:	c3 a0 00 00 	ret

00000430 <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
 430:	78 03 00 00 	mvhi r3,0x0
 434:	3c 21 00 02 	sli r1,r1,2
 438:	38 63 07 7c 	ori r3,r3,0x77c
 43c:	78 02 00 00 	mvhi r2,0x0
 440:	b4 61 18 00 	add r3,r3,r1
 444:	38 42 03 60 	ori r2,r2,0x360
 448:	58 62 00 00 	sw (r3+0),r2
}
 44c:	c3 a0 00 00 	ret

00000450 <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 450:	78 04 00 00 	mvhi r4,0x0
 454:	38 84 07 64 	ori r4,r4,0x764
 458:	28 83 00 00 	lw r3,(r4+0)
 45c:	78 02 00 00 	mvhi r2,0x0
 460:	38 42 07 6c 	ori r2,r2,0x76c
 464:	28 42 00 00 	lw r2,(r2+0)
 468:	88 23 08 00 	mul r1,r1,r3
 46c:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 470:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 474:	34 01 00 08 	mvi r1,8
 478:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 47c:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 480:	20 21 00 01 	andi r1,r1,0x1
 484:	44 20 ff fe 	be r1,r0,47c <msleep+0x2c>
}
 488:	c3 a0 00 00 	ret

0000048c <nsleep>:
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 48c:	78 02 00 00 	mvhi r2,0x0
 490:	38 42 07 6c 	ori r2,r2,0x76c
 494:	28 42 00 00 	lw r2,(r2+0)
 498:	08 21 00 64 	muli r1,r1,100
 49c:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 4a0:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 4a4:	34 01 00 08 	mvi r1,8
 4a8:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 4ac:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 4b0:	20 21 00 01 	andi r1,r1,0x1
 4b4:	44 20 ff fe 	be r1,r0,4ac <nsleep+0x20>
}
 4b8:	c3 a0 00 00 	ret

000004bc <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 4bc:	78 01 00 00 	mvhi r1,0x0
 4c0:	38 21 07 6c 	ori r1,r1,0x76c
 4c4:	28 23 00 00 	lw r3,(r1+0)
 4c8:	34 02 27 10 	mvi r2,10000
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 4cc:	78 01 00 00 	mvhi r1,0x0

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 4d0:	58 62 00 04 	sw (r3+4),r2
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 4d4:	38 21 07 fc 	ori r1,r1,0x7fc

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
 4d8:	58 60 00 08 	sw (r3+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 4dc:	58 20 00 00 	sw (r1+0),r0
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 4e0:	78 02 00 00 	mvhi r2,0x0
 4e4:	78 01 00 00 	mvhi r1,0x0
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 4e8:	34 04 00 0e 	mvi r4,14
 4ec:	58 64 00 00 	sw (r3+0),r4
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 4f0:	38 21 07 7c 	ori r1,r1,0x77c
 4f4:	38 42 03 64 	ori r2,r2,0x364
 4f8:	58 22 00 04 	sw (r1+4),r2
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

	isr_register(1, &tic_isr);
}
 4fc:	c3 a0 00 00 	ret

00000500 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 500:	c3 a0 00 00 	ret

00000504 <uart_getchar>:

char uart_getchar()
{   
 504:	78 01 00 00 	mvhi r1,0x0
 508:	38 21 07 68 	ori r1,r1,0x768
 50c:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 510:	28 41 00 00 	lw r1,(r2+0)
 514:	20 21 00 01 	andi r1,r1,0x1
 518:	44 20 ff fe 	be r1,r0,510 <uart_getchar+0xc>
	return uart0->rxtx;
 51c:	28 41 00 04 	lw r1,(r2+4)
}
 520:	20 21 00 ff 	andi r1,r1,0xff
 524:	c3 a0 00 00 	ret

00000528 <uart_putchar>:

void uart_putchar(char c)
{
 528:	78 02 00 00 	mvhi r2,0x0
 52c:	38 42 07 68 	ori r2,r2,0x768
 530:	28 43 00 00 	lw r3,(r2+0)
 534:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 538:	28 62 00 00 	lw r2,(r3+0)
 53c:	20 42 00 10 	andi r2,r2,0x10
 540:	5c 40 ff fe 	bne r2,r0,538 <uart_putchar+0x10>
	uart0->rxtx = c;
 544:	58 61 00 04 	sw (r3+4),r1
}
 548:	c3 a0 00 00 	ret

0000054c <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 54c:	40 24 00 00 	lbu r4,(r1+0)
 550:	44 80 00 0b 	be r4,r0,57c <uart_putstr+0x30>
 554:	78 02 00 00 	mvhi r2,0x0
 558:	38 42 07 68 	ori r2,r2,0x768
 55c:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 560:	28 62 00 00 	lw r2,(r3+0)
 564:	20 42 00 10 	andi r2,r2,0x10
 568:	5c 40 ff fe 	bne r2,r0,560 <uart_putstr+0x14>
	uart0->rxtx = c;
 56c:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
 570:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 574:	40 24 00 00 	lbu r4,(r1+0)
 578:	5c 82 ff fa 	bne r4,r2,560 <uart_putstr+0x14>
 57c:	c3 a0 00 00 	ret

00000580 <gpio_get_in1>:
/*******************************************************************************
 GPIO funciones primitivas
*/

char gpio_get_in1(){
	return gpio0->in1;
 580:	78 01 00 00 	mvhi r1,0x0
 584:	38 21 07 70 	ori r1,r1,0x770
 588:	28 21 00 00 	lw r1,(r1+0)
 58c:	28 21 00 00 	lw r1,(r1+0)
}
 590:	20 21 00 ff 	andi r1,r1,0xff
 594:	c3 a0 00 00 	ret

00000598 <gpio_get_in2>:

char gpio_get_in2(){
	return gpio0->in2;
 598:	78 01 00 00 	mvhi r1,0x0
 59c:	38 21 07 70 	ori r1,r1,0x770
 5a0:	28 21 00 00 	lw r1,(r1+0)
 5a4:	28 21 00 04 	lw r1,(r1+4)
}
 5a8:	20 21 00 ff 	andi r1,r1,0xff
 5ac:	c3 a0 00 00 	ret

000005b0 <gpio_set_out1>:


void gpio_set_out1(char temp1)
{ 
	gpio0->out1=temp1;
 5b0:	78 02 00 00 	mvhi r2,0x0
 5b4:	38 42 07 70 	ori r2,r2,0x770
 5b8:	28 42 00 00 	lw r2,(r2+0)
	return gpio0->in2;
}


void gpio_set_out1(char temp1)
{ 
 5bc:	20 21 00 ff 	andi r1,r1,0xff
	gpio0->out1=temp1;
 5c0:	58 41 00 08 	sw (r2+8),r1
 }
 5c4:	c3 a0 00 00 	ret

000005c8 <gpio_set_out2>:

void gpio_set_out2(char temp2){

	gpio0->out2=temp2;
 5c8:	78 02 00 00 	mvhi r2,0x0
 5cc:	38 42 07 70 	ori r2,r2,0x770
 5d0:	28 42 00 00 	lw r2,(r2+0)
void gpio_set_out1(char temp1)
{ 
	gpio0->out1=temp1;
 }

void gpio_set_out2(char temp2){
 5d4:	20 21 00 ff 	andi r1,r1,0xff

	gpio0->out2=temp2;
 5d8:	58 41 00 0c 	sw (r2+12),r1
}
 5dc:	c3 a0 00 00 	ret

000005e0 <gpio_set_dir1>:

void gpio_set_dir1(char temp3)
{  
	gpio0->dir1=temp3;
 5e0:	78 02 00 00 	mvhi r2,0x0
 5e4:	38 42 07 70 	ori r2,r2,0x770
 5e8:	28 42 00 00 	lw r2,(r2+0)

	gpio0->out2=temp2;
}

void gpio_set_dir1(char temp3)
{  
 5ec:	20 21 00 ff 	andi r1,r1,0xff
	gpio0->dir1=temp3;
 5f0:	58 41 00 10 	sw (r2+16),r1
}
 5f4:	c3 a0 00 00 	ret

000005f8 <gpio_set_dir2>:

void gpio_set_dir2(char temp4){

	gpio0->dir2=temp4;
 5f8:	78 02 00 00 	mvhi r2,0x0
 5fc:	38 42 07 70 	ori r2,r2,0x770
 600:	28 42 00 00 	lw r2,(r2+0)
void gpio_set_dir1(char temp3)
{  
	gpio0->dir1=temp3;
}

void gpio_set_dir2(char temp4){
 604:	20 21 00 ff 	andi r1,r1,0xff

	gpio0->dir2=temp4;
 608:	58 41 00 14 	sw (r2+20),r1
}
 60c:	c3 a0 00 00 	ret

00000610 <spi_Writte>:
*/



void spi_Writte(char adrr,char value){
	spi0->adressWritte=adrr;
 610:	78 03 00 00 	mvhi r3,0x0
 614:	38 63 07 74 	ori r3,r3,0x774
 618:	28 63 00 00 	lw r3,(r3+0)
SPI
*/



void spi_Writte(char adrr,char value){
 61c:	20 21 00 ff 	andi r1,r1,0xff
 620:	20 42 00 ff 	andi r2,r2,0xff
	spi0->adressWritte=adrr;
 624:	58 61 00 0c 	sw (r3+12),r1
	spi0->byteTowritte=value;
 628:	58 62 00 10 	sw (r3+16),r2
	while((spi0->statusWritte)==0x01);
 62c:	34 02 00 01 	mvi r2,1
 630:	28 61 00 04 	lw r1,(r3+4)
 634:	44 22 ff ff 	be r1,r2,630 <spi_Writte+0x20>
}
 638:	c3 a0 00 00 	ret

0000063c <spi_read>:
char spi_read(char Addr){
	spi0->adressRead=Addr;
 63c:	78 02 00 00 	mvhi r2,0x0
 640:	38 42 07 74 	ori r2,r2,0x774
 644:	28 42 00 00 	lw r2,(r2+0)
void spi_Writte(char adrr,char value){
	spi0->adressWritte=adrr;
	spi0->byteTowritte=value;
	while((spi0->statusWritte)==0x01);
}
char spi_read(char Addr){
 648:	20 21 00 ff 	andi r1,r1,0xff
	spi0->adressRead=Addr;
	while((spi0->statusRead)==0x01);
 64c:	34 03 00 01 	mvi r3,1
	spi0->adressWritte=adrr;
	spi0->byteTowritte=value;
	while((spi0->statusWritte)==0x01);
}
char spi_read(char Addr){
	spi0->adressRead=Addr;
 650:	58 41 00 14 	sw (r2+20),r1
	while((spi0->statusRead)==0x01);
 654:	28 41 00 08 	lw r1,(r2+8)
 658:	44 23 ff ff 	be r1,r3,654 <spi_read+0x18>
	return spi0->Readed;
 65c:	28 41 00 00 	lw r1,(r2+0)
}
 660:	20 21 00 ff 	andi r1,r1,0xff
 664:	c3 a0 00 00 	ret

00000668 <SPI_begin>:
void SPI_begin(){
	spi0->begin=0x01;
 668:	78 01 00 00 	mvhi r1,0x0
 66c:	38 21 07 74 	ori r1,r1,0x774
 670:	28 21 00 00 	lw r1,(r1+0)
 674:	34 02 00 01 	mvi r2,1
 678:	58 22 00 18 	sw (r1+24),r2
}
 67c:	c3 a0 00 00 	ret

00000680 <spi_setDiv>:

void spi_setDiv(char f){
	spi0->divisor=f;
 680:	78 02 00 00 	mvhi r2,0x0
 684:	38 42 07 74 	ori r2,r2,0x774
 688:	28 42 00 00 	lw r2,(r2+0)
}
void SPI_begin(){
	spi0->begin=0x01;
}

void spi_setDiv(char f){
 68c:	20 21 00 ff 	andi r1,r1,0xff
	spi0->divisor=f;
 690:	58 41 00 1c 	sw (r2+28),r1
}
 694:	c3 a0 00 00 	ret

00000698 <ReadChanel>:

/*********************************************************
I2C Conversor
*/

void ReadChanel(char ch){
 698:	20 21 00 ff 	andi r1,r1,0xff
	switch(ch){
 69c:	34 02 00 01 	mvi r2,1
 6a0:	44 22 00 1f 	be r1,r2,71c <ReadChanel+0x84>
 6a4:	5c 20 00 0e 	bne r1,r0,6dc <ReadChanel+0x44>
	   break;
	   case 0x03:
		i2c0->ByteConfigurationOne=0xF3;
	   break;
	   default:
		i2c0->ByteConfigurationOne=0xC3;
 6a8:	78 01 00 00 	mvhi r1,0x0
 6ac:	38 21 07 78 	ori r1,r1,0x778
 6b0:	28 21 00 00 	lw r1,(r1+0)
 6b4:	34 02 00 c3 	mvi r2,195
 6b8:	58 22 00 0c 	sw (r1+12),r2
	   break;
	}
	i2c0->ByteConfigurationTwo=0X83;//FS 4.096 volts although this is more than electrical especifications,there never be more than 3.6
 6bc:	34 02 00 83 	mvi r2,131
 6c0:	58 22 00 10 	sw (r1+16),r2
	i2c0->Start=0x01;
 6c4:	34 02 00 01 	mvi r2,1
 6c8:	58 22 00 14 	sw (r1+20),r2
	while((i2c0->Busy)==0x01);
 6cc:	34 03 00 01 	mvi r3,1
 6d0:	28 22 00 00 	lw r2,(r1+0)
 6d4:	44 43 ff ff 	be r2,r3,6d0 <ReadChanel+0x38>
}
 6d8:	c3 a0 00 00 	ret
/*********************************************************
I2C Conversor
*/

void ReadChanel(char ch){
	switch(ch){
 6dc:	34 02 00 02 	mvi r2,2
 6e0:	44 22 00 09 	be r1,r2,704 <ReadChanel+0x6c>
 6e4:	34 02 00 03 	mvi r2,3
 6e8:	5c 22 ff f0 	bne r1,r2,6a8 <ReadChanel+0x10>
	   break;
	   case 0x02:
		i2c0->ByteConfigurationOne=0xE3;
	   break;
	   case 0x03:
		i2c0->ByteConfigurationOne=0xF3;
 6ec:	78 01 00 00 	mvhi r1,0x0
 6f0:	38 21 07 78 	ori r1,r1,0x778
 6f4:	28 21 00 00 	lw r1,(r1+0)
 6f8:	34 02 00 f3 	mvi r2,243
 6fc:	58 22 00 0c 	sw (r1+12),r2
	   break;
 700:	e3 ff ff ef 	bi 6bc <ReadChanel+0x24>
	   break;
	   case 0x01:
		i2c0->ByteConfigurationOne=0xD3;
	   break;
	   case 0x02:
		i2c0->ByteConfigurationOne=0xE3;
 704:	78 01 00 00 	mvhi r1,0x0
 708:	38 21 07 78 	ori r1,r1,0x778
 70c:	28 21 00 00 	lw r1,(r1+0)
 710:	34 02 00 e3 	mvi r2,227
 714:	58 22 00 0c 	sw (r1+12),r2
	   break;
 718:	e3 ff ff e9 	bi 6bc <ReadChanel+0x24>
	switch(ch){
	   case 0x00:
		i2c0->ByteConfigurationOne=0xC3;
	   break;
	   case 0x01:
		i2c0->ByteConfigurationOne=0xD3;
 71c:	78 01 00 00 	mvhi r1,0x0
 720:	38 21 07 78 	ori r1,r1,0x778
 724:	28 21 00 00 	lw r1,(r1+0)
 728:	34 02 00 d3 	mvi r2,211
 72c:	58 22 00 0c 	sw (r1+12),r2
	   break;
 730:	e3 ff ff e3 	bi 6bc <ReadChanel+0x24>

00000734 <GetByteOne>:
	i2c0->Start=0x01;
	while((i2c0->Busy)==0x01);
}

char GetByteOne(){
	return i2c0->ByteReadedOne;
 734:	78 01 00 00 	mvhi r1,0x0
 738:	38 21 07 78 	ori r1,r1,0x778
 73c:	28 21 00 00 	lw r1,(r1+0)
 740:	28 21 00 04 	lw r1,(r1+4)
}
 744:	20 21 00 ff 	andi r1,r1,0xff
 748:	c3 a0 00 00 	ret

0000074c <GetByteTwo>:
char GetByteTwo()
{
	return i2c0->ByteReadedTwo;
 74c:	78 01 00 00 	mvhi r1,0x0
 750:	38 21 07 78 	ori r1,r1,0x778
 754:	28 21 00 00 	lw r1,(r1+0)
 758:	28 21 00 08 	lw r1,(r1+8)
}
 75c:	20 21 00 ff 	andi r1,r1,0xff
 760:	c3 a0 00 00 	ret
