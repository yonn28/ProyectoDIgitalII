
image:     file format elf32-lm32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a1c  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000050  00000a1c  00000a1c  00000a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000018  00000a6c  00000a6c  00000ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000084  00000a84  00000a84  00000ad8  2**2
                  ALLOC
  4 .debug_abbrev 00000277  00000000  00000000  00000ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009ac  00000000  00000000  00000d4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000090a  00000000  00000000  000016fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000210  00000000  00000000  00002008  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000002ba  00000000  00000000  00002218  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 00000260  00000000  00000000  000024d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 00000090  00000000  00000000  00002732  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000040  00000000  00000000  000027c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000037f  00000000  00000000  00002802  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000011  00000000  00000000  00002b81  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 dc 	calli 43c <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 0a 90 	ori gp,gp,0xa90
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 0a 84 	ori r1,r1,0xa84
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 0b 08 	ori r3,r3,0xb08

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <main>:

#include "soc-hw.h"


int main()
{
 208:	37 9c ff f0 	addi sp,sp,-16
 20c:	5b 8b 00 10 	sw (sp+16),r11
 210:	5b 8c 00 0c 	sw (sp+12),r12
 214:	5b 8d 00 08 	sw (sp+8),r13
 218:	5b 9d 00 04 	sw (sp+4),ra
		SetDisplay(0x06,a%10);
	}
*/
//test with UART web page ALL proyect less Xbee

	gpio_set_dir1(0xFF);
 21c:	34 01 00 ff 	mvi r1,255
 220:	f8 00 01 25 	calli 6b4 <gpio_set_dir1>
	gpio_set_dir2(0xFF);
 224:	34 01 00 ff 	mvi r1,255
 228:	f8 00 01 29 	calli 6cc <gpio_set_dir2>
	SetDpDisplay(0x04);
 22c:	34 01 00 04 	mvi r1,4
 230:	f8 00 01 c2 	calli 938 <SetDpDisplay>
	SPI_begin();
 234:	f8 00 01 42 	calli 73c <SPI_begin>
	spi_Writte(0x80,0xE6);
 238:	34 01 00 80 	mvi r1,128
 23c:	34 02 00 e6 	mvi r2,230
 240:	f8 00 01 29 	calli 6e4 <spi_Writte>
		//gpio_set_out1(d);//less significative bit is u1

		uint32_t value=d + ((uint32_t)c<<8);
		uint32_t value2 = value; 

		SetDisplay(0x01,value2%10);
 244:	34 0b 00 0a 	mvi r11,10
	SPI_begin();
	spi_Writte(0x80,0xE6);

	while(1){
			
		I2CstartCond();//Start
 248:	f8 00 01 49 	calli 76c <I2CstartCond>
		I2CWriteBytePointer(0x90);//Slave Address
 24c:	34 01 00 90 	mvi r1,144
 250:	f8 00 01 59 	calli 7b4 <I2CWriteBytePointer>
		I2CWriteByte(0x01);//Configuration Register
 254:	34 01 00 01 	mvi r1,1
 258:	f8 00 01 62 	calli 7e0 <I2CWriteByte>
		I2CWriteByte(0xC3);//configuration Byte One (chanel zero)
 25c:	34 01 00 c3 	mvi r1,195
 260:	f8 00 01 60 	calli 7e0 <I2CWriteByte>
		//I2CWriteByte(0xD3);//configuration Byte One (chanel one)
		//I2CWriteByte(0xE3);//configuration Byte One (chanel Two)
		//I2CWriteByte(0xF3);//configuration Byte One  (chanel Three)
		I2CWriteByte(0x83);//configuration Byte Two
 264:	34 01 00 83 	mvi r1,131
 268:	f8 00 01 5e 	calli 7e0 <I2CWriteByte>
		I2CStopCond();//Stop 
 26c:	f8 00 01 49 	calli 790 <I2CStopCond>
		nsleep(500);//bus free
 270:	34 01 01 f4 	mvi r1,500
 274:	f8 00 00 b5 	calli 548 <nsleep>
		I2CstartCond();//Start
 278:	f8 00 01 3d 	calli 76c <I2CstartCond>
		I2CWriteBytePointer(0x90);//Slave Address
 27c:	34 01 00 90 	mvi r1,144
 280:	f8 00 01 4d 	calli 7b4 <I2CWriteBytePointer>
		I2CWriteByte(0x00);//convertion Register
 284:	34 01 00 00 	mvi r1,0
 288:	f8 00 01 56 	calli 7e0 <I2CWriteByte>
		I2CStopCond();//Stop
 28c:	f8 00 01 41 	calli 790 <I2CStopCond>
		I2CstartCond();//Start	
 290:	f8 00 01 37 	calli 76c <I2CstartCond>
		I2CWriteByte(0x91);//Slave Address With r/w in one	
 294:	34 01 00 91 	mvi r1,145
 298:	f8 00 01 52 	calli 7e0 <I2CWriteByte>
		char c=I2CReadByte();//most Significative
 29c:	f8 00 01 64 	calli 82c <I2CReadByte>
 2a0:	b8 20 60 00 	mv r12,r1
		char d=I2CReadByte();//less Signinificative
 2a4:	f8 00 01 62 	calli 82c <I2CReadByte>
 2a8:	b8 20 68 00 	mv r13,r1
		I2CStopCond();//Stop
 2ac:	f8 00 01 39 	calli 790 <I2CStopCond>
		
		uart_putchar(0x61);
 2b0:	34 01 00 61 	mvi r1,97
 2b4:	f8 00 00 d2 	calli 5fc <uart_putchar>
		uart_putchar(0x62);//Page Rigidez MOSTSIG
 2b8:	34 01 00 62 	mvi r1,98
 2bc:	f8 00 00 d0 	calli 5fc <uart_putchar>
		uart_putchar(c);
 2c0:	b9 80 08 00 	mv r1,r12
 2c4:	f8 00 00 ce 	calli 5fc <uart_putchar>

		uart_putchar(0x61);
 2c8:	34 01 00 61 	mvi r1,97
 2cc:	f8 00 00 cc 	calli 5fc <uart_putchar>
		uart_putchar(0x63);//Page Rigidez LessSignificative
 2d0:	34 01 00 63 	mvi r1,99
 2d4:	f8 00 00 ca 	calli 5fc <uart_putchar>


		//gpio_set_out2(c);//most significative Bit is V11 pin Give Coherenc
		//gpio_set_out1(d);//less significative bit is u1

		uint32_t value=d + ((uint32_t)c<<8);
 2d8:	3d 8c 00 08 	sli r12,r12,8
		uart_putchar(0x62);//Page Rigidez MOSTSIG
		uart_putchar(c);

		uart_putchar(0x61);
		uart_putchar(0x63);//Page Rigidez LessSignificative
		uart_putchar(d);
 2dc:	b9 a0 08 00 	mv r1,r13
 2e0:	f8 00 00 c7 	calli 5fc <uart_putchar>


		//gpio_set_out2(c);//most significative Bit is V11 pin Give Coherenc
		//gpio_set_out1(d);//less significative bit is u1

		uint32_t value=d + ((uint32_t)c<<8);
 2e4:	b5 8d 60 00 	add r12,r12,r13
		uint32_t value2 = value; 

		SetDisplay(0x01,value2%10);
 2e8:	c5 8b 10 00 	modu r2,r12,r11
 2ec:	34 01 00 01 	mvi r1,1
 2f0:	f8 00 01 60 	calli 870 <SetDisplay>
		value2 = value2/10;
 2f4:	8d 8b 60 00 	divu r12,r12,r11
		SetDisplay(0x02,value2%10);
 2f8:	34 01 00 02 	mvi r1,2
 2fc:	c5 8b 10 00 	modu r2,r12,r11
 300:	f8 00 01 5c 	calli 870 <SetDisplay>
		value2 = value2/10;
 304:	8d 8b 60 00 	divu r12,r12,r11
		SetDisplay(0x03,value2%10);
 308:	34 01 00 03 	mvi r1,3
 30c:	c5 8b 10 00 	modu r2,r12,r11
 310:	f8 00 01 58 	calli 870 <SetDisplay>
		value2 = value2/10;
 314:	8d 8b 60 00 	divu r12,r12,r11
		SetDisplay(0x04,value2%10);
 318:	34 01 00 04 	mvi r1,4
 31c:	c5 8b 10 00 	modu r2,r12,r11
 320:	f8 00 01 54 	calli 870 <SetDisplay>
		value2 = value2/10;
 324:	8d 8b 60 00 	divu r12,r12,r11
		SetDisplay(0x05,value2%10);
 328:	34 01 00 05 	mvi r1,5
 32c:	c5 8b 10 00 	modu r2,r12,r11
 330:	f8 00 01 50 	calli 870 <SetDisplay>
		value2 = value2/10;
 334:	8d 8b 10 00 	divu r2,r12,r11
		SetDisplay(0x06,value2%10);
 338:	34 01 00 06 	mvi r1,6
 33c:	c4 4b 10 00 	modu r2,r2,r11
 340:	f8 00 01 4c 	calli 870 <SetDisplay>

		I2CstartCond();//Start
 344:	f8 00 01 0a 	calli 76c <I2CstartCond>
		I2CWriteBytePointer(0x90);//Slave Address
 348:	34 01 00 90 	mvi r1,144
 34c:	f8 00 01 1a 	calli 7b4 <I2CWriteBytePointer>
		I2CWriteByte(0x01);//Configuration Register
 350:	34 01 00 01 	mvi r1,1
 354:	f8 00 01 23 	calli 7e0 <I2CWriteByte>
		//I2CWriteByte(0xC3);//configuration Byte One (chanel zero)
		I2CWriteByte(0xD3);//configuration Byte One (chanel one)
 358:	34 01 00 d3 	mvi r1,211
 35c:	f8 00 01 21 	calli 7e0 <I2CWriteByte>
		//I2CWriteByte(0xE3);//configuration Byte One (chanel Two)
		//I2CWriteByte(0xF3);//configuration Byte One  (chanel Three)
		I2CWriteByte(0x83);//configuration Byte Two
 360:	34 01 00 83 	mvi r1,131
 364:	f8 00 01 1f 	calli 7e0 <I2CWriteByte>
		I2CStopCond();//Stop 
 368:	f8 00 01 0a 	calli 790 <I2CStopCond>
		nsleep(500);//bus free
 36c:	34 01 01 f4 	mvi r1,500
 370:	f8 00 00 76 	calli 548 <nsleep>
		I2CstartCond();//Start
 374:	f8 00 00 fe 	calli 76c <I2CstartCond>
		I2CWriteBytePointer(0x90);//Slave Address
 378:	34 01 00 90 	mvi r1,144
 37c:	f8 00 01 0e 	calli 7b4 <I2CWriteBytePointer>
		I2CWriteByte(0x00);//convertion Register
 380:	34 01 00 00 	mvi r1,0
 384:	f8 00 01 17 	calli 7e0 <I2CWriteByte>
		I2CStopCond();//Stop
 388:	f8 00 01 02 	calli 790 <I2CStopCond>
		I2CstartCond();//Start	
 38c:	f8 00 00 f8 	calli 76c <I2CstartCond>
		I2CWriteByte(0x91);//Slave Address With r/w in one	
 390:	34 01 00 91 	mvi r1,145
 394:	f8 00 01 13 	calli 7e0 <I2CWriteByte>
		char f=I2CReadByte();//most Significative
 398:	f8 00 01 25 	calli 82c <I2CReadByte>
 39c:	b8 20 68 00 	mv r13,r1
		char g=I2CReadByte();//less Signinificative
 3a0:	f8 00 01 23 	calli 82c <I2CReadByte>
 3a4:	b8 20 60 00 	mv r12,r1
		I2CStopCond();//stop
 3a8:	f8 00 00 fa 	calli 790 <I2CStopCond>

		gpio_set_out2(f);//most significative Bit is V11 pin Give Coherenc
 3ac:	b9 a0 08 00 	mv r1,r13
 3b0:	f8 00 00 bb 	calli 69c <gpio_set_out2>
		gpio_set_out1(g);//less significative bit is u1
 3b4:	b9 80 08 00 	mv r1,r12
 3b8:	f8 00 00 b3 	calli 684 <gpio_set_out1>

		uart_putchar(0x61);
 3bc:	34 01 00 61 	mvi r1,97
 3c0:	f8 00 00 8f 	calli 5fc <uart_putchar>
		uart_putchar(0x64);//Page Pulso MOSTSIG
 3c4:	34 01 00 64 	mvi r1,100
 3c8:	f8 00 00 8d 	calli 5fc <uart_putchar>
		uart_putchar(f);
 3cc:	b9 a0 08 00 	mv r1,r13
 3d0:	f8 00 00 8b 	calli 5fc <uart_putchar>

		uart_putchar(0x61);
 3d4:	34 01 00 61 	mvi r1,97
 3d8:	f8 00 00 89 	calli 5fc <uart_putchar>
		uart_putchar(0x65);//Page Pulso Less Significative
 3dc:	34 01 00 65 	mvi r1,101
 3e0:	f8 00 00 87 	calli 5fc <uart_putchar>
		uart_putchar(g);
 3e4:	b9 80 08 00 	mv r1,r12
 3e8:	f8 00 00 85 	calli 5fc <uart_putchar>


		char a=spi_read(0x02);// most significative byte Temperature
 3ec:	34 01 00 02 	mvi r1,2
 3f0:	f8 00 00 c8 	calli 710 <spi_read>
 3f4:	b8 20 68 00 	mv r13,r1
		char b=spi_read(0x01);//read the float part in ds1722
 3f8:	34 01 00 01 	mvi r1,1
 3fc:	f8 00 00 c5 	calli 710 <spi_read>
 400:	b8 20 60 00 	mv r12,r1
	
		uart_putchar(0x61);
 404:	34 01 00 61 	mvi r1,97
 408:	f8 00 00 7d 	calli 5fc <uart_putchar>
		uart_putchar(0x66);//Page integer Tempetarure
 40c:	34 01 00 66 	mvi r1,102
 410:	f8 00 00 7b 	calli 5fc <uart_putchar>
		uart_putchar(a);
 414:	b9 a0 08 00 	mv r1,r13
 418:	f8 00 00 79 	calli 5fc <uart_putchar>

		uart_putchar(0x61);
 41c:	34 01 00 61 	mvi r1,97
 420:	f8 00 00 77 	calli 5fc <uart_putchar>
		uart_putchar(0x67);//Page float Tempetarure
 424:	34 01 00 67 	mvi r1,103
 428:	f8 00 00 75 	calli 5fc <uart_putchar>
		uart_putchar(b);
 42c:	b9 80 08 00 	mv r1,r12
 430:	f8 00 00 73 	calli 5fc <uart_putchar>
 434:	e3 ff ff 85 	bi 248 <main+0x40>

00000438 <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
 438:	c3 a0 00 00 	ret

0000043c <irq_handler>:

void irq_handler(uint32_t pending)
{	
	timer0->compare0 =50000000000;
 43c:	78 01 00 00 	mvhi r1,0x0
 440:	78 04 00 00 	mvhi r4,0x0
 444:	38 21 0a 70 	ori r1,r1,0xa70
 448:	38 84 0a 1c 	ori r4,r4,0xa1c
 44c:	28 23 00 00 	lw r3,(r1+0)
 450:	28 82 00 00 	lw r2,(r4+0)
	timer0->counter0 = 0;	
 454:	78 01 00 00 	mvhi r1,0x0
 458:	38 21 0a 6c 	ori r1,r1,0xa6c
 45c:	28 21 00 00 	lw r1,(r1+0)
{
}

void irq_handler(uint32_t pending)
{	
	timer0->compare0 =50000000000;
 460:	58 62 00 04 	sw (r3+4),r2
	timer0->counter0 = 0;	
 464:	58 60 00 08 	sw (r3+8),r0
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 468:	28 22 00 00 	lw r2,(r1+0)
 46c:	20 42 00 10 	andi r2,r2,0x10
 470:	5c 40 ff fe 	bne r2,r0,468 <irq_handler+0x2c>
	uart0->rxtx = c;
 474:	34 02 00 ff 	mvi r2,255
 478:	58 22 00 04 	sw (r1+4),r2
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 47c:	28 22 00 00 	lw r2,(r1+0)
 480:	20 42 00 10 	andi r2,r2,0x10
 484:	5c 40 ff fe 	bne r2,r0,47c <irq_handler+0x40>
	uart0->rxtx = c;
 488:	34 02 00 aa 	mvi r2,170
 48c:	58 22 00 04 	sw (r1+4),r2
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 490:	28 22 00 00 	lw r2,(r1+0)
 494:	20 42 00 10 	andi r2,r2,0x10
 498:	5c 40 ff fe 	bne r2,r0,490 <irq_handler+0x54>
	uart0->rxtx = c;
 49c:	34 02 00 bb 	mvi r2,187
 4a0:	58 22 00 04 	sw (r1+4),r2
	timer0->compare0 =50000000000;
	timer0->counter0 = 0;	
        uart_putchar(0xFF);
	uart_putchar(0xAA);
	uart_putchar(0xBB);
	timer0->tcr0     = TIMER_EN | TIMER_AR| TIMER_IRQEN ;
 4a4:	34 01 00 0e 	mvi r1,14
 4a8:	58 61 00 00 	sw (r3+0),r1
	//irq_disable();

}
 4ac:	c3 a0 00 00 	ret

000004b0 <isr_init>:

void isr_init()
{
 4b0:	78 01 00 00 	mvhi r1,0x0
 4b4:	78 02 00 00 	mvhi r2,0x0
 4b8:	38 21 0a 84 	ori r1,r1,0xa84
 4bc:	38 42 04 38 	ori r2,r2,0x438
	timer0->tcr0     = TIMER_EN | TIMER_AR| TIMER_IRQEN ;
	//irq_disable();

}

void isr_init()
 4c0:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
 4c4:	58 22 00 00 	sw (r1+0),r2
 4c8:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
 4cc:	5c 23 ff fe 	bne r1,r3,4c4 <isr_init+0x14>
		isr_table[i] = &isr_null;
}
 4d0:	c3 a0 00 00 	ret

000004d4 <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 4d4:	78 03 00 00 	mvhi r3,0x0
 4d8:	3c 21 00 02 	sli r1,r1,2
 4dc:	38 63 0a 84 	ori r3,r3,0xa84
 4e0:	b4 61 18 00 	add r3,r3,r1
 4e4:	58 62 00 00 	sw (r3+0),r2
}
 4e8:	c3 a0 00 00 	ret

000004ec <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
 4ec:	78 03 00 00 	mvhi r3,0x0
 4f0:	3c 21 00 02 	sli r1,r1,2
 4f4:	38 63 0a 84 	ori r3,r3,0xa84
 4f8:	78 02 00 00 	mvhi r2,0x0
 4fc:	b4 61 18 00 	add r3,r3,r1
 500:	38 42 04 38 	ori r2,r2,0x438
 504:	58 62 00 00 	sw (r3+0),r2
}
 508:	c3 a0 00 00 	ret

0000050c <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 50c:	78 04 00 00 	mvhi r4,0x0
 510:	38 84 0a 20 	ori r4,r4,0xa20
 514:	28 83 00 00 	lw r3,(r4+0)
 518:	78 02 00 00 	mvhi r2,0x0
 51c:	38 42 0a 70 	ori r2,r2,0xa70
 520:	28 42 00 00 	lw r2,(r2+0)
 524:	88 23 08 00 	mul r1,r1,r3
 528:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 52c:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 530:	34 01 00 08 	mvi r1,8
 534:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 538:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 53c:	20 21 00 01 	andi r1,r1,0x1
 540:	44 20 ff fe 	be r1,r0,538 <msleep+0x2c>
}
 544:	c3 a0 00 00 	ret

00000548 <nsleep>:
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 548:	78 02 00 00 	mvhi r2,0x0
 54c:	38 42 0a 70 	ori r2,r2,0xa70
 550:	28 42 00 00 	lw r2,(r2+0)
 554:	08 21 00 64 	muli r1,r1,100
 558:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 55c:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 560:	34 01 00 08 	mvi r1,8
 564:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 568:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 56c:	20 21 00 01 	andi r1,r1,0x1
 570:	44 20 ff fe 	be r1,r0,568 <nsleep+0x20>
}
 574:	c3 a0 00 00 	ret

00000578 <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 578:	78 01 00 00 	mvhi r1,0x0
 57c:	38 21 0b 04 	ori r1,r1,0xb04
 580:	28 23 00 00 	lw r3,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 584:	78 02 00 00 	mvhi r2,0x0
 588:	38 42 0a 70 	ori r2,r2,0xa70
 58c:	28 42 00 00 	lw r2,(r2+0)

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 590:	34 63 00 01 	addi r3,r3,1
 594:	58 23 00 00 	sw (r1+0),r3
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 598:	34 01 00 0e 	mvi r1,14
 59c:	58 41 00 00 	sw (r2+0),r1
}
 5a0:	c3 a0 00 00 	ret

000005a4 <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 =500;
 5a4:	78 01 00 00 	mvhi r1,0x0
 5a8:	38 21 0a 70 	ori r1,r1,0xa70
 5ac:	28 21 00 00 	lw r1,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 5b0:	78 02 00 00 	mvhi r2,0x0

	// Setup timer0.0
	timer0->compare0 =500;
 5b4:	34 03 01 f4 	mvi r3,500
 5b8:	58 23 00 04 	sw (r1+4),r3
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 5bc:	38 42 0b 04 	ori r2,r2,0xb04
 5c0:	58 40 00 00 	sw (r2+0),r0

	// Setup timer0.0
	timer0->compare0 =500;
	timer0->counter0 = 0;
 5c4:	58 20 00 08 	sw (r1+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 5c8:	34 02 00 0e 	mvi r2,14
 5cc:	58 22 00 00 	sw (r1+0),r2

	//isr_register(1, &tic_isr);
}
 5d0:	c3 a0 00 00 	ret

000005d4 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 5d4:	c3 a0 00 00 	ret

000005d8 <uart_getchar>:

char uart_getchar()
{   
 5d8:	78 01 00 00 	mvhi r1,0x0
 5dc:	38 21 0a 6c 	ori r1,r1,0xa6c
 5e0:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 5e4:	28 41 00 00 	lw r1,(r2+0)
 5e8:	20 21 00 01 	andi r1,r1,0x1
 5ec:	44 20 ff fe 	be r1,r0,5e4 <uart_getchar+0xc>
	return uart0->rxtx;
 5f0:	28 41 00 04 	lw r1,(r2+4)
}
 5f4:	20 21 00 ff 	andi r1,r1,0xff
 5f8:	c3 a0 00 00 	ret

000005fc <uart_putchar>:

void uart_putchar(char c)
{
 5fc:	78 02 00 00 	mvhi r2,0x0
 600:	38 42 0a 6c 	ori r2,r2,0xa6c
 604:	28 43 00 00 	lw r3,(r2+0)
 608:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 60c:	28 62 00 00 	lw r2,(r3+0)
 610:	20 42 00 10 	andi r2,r2,0x10
 614:	5c 40 ff fe 	bne r2,r0,60c <uart_putchar+0x10>
	uart0->rxtx = c;
 618:	58 61 00 04 	sw (r3+4),r1
}
 61c:	c3 a0 00 00 	ret

00000620 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 620:	40 24 00 00 	lbu r4,(r1+0)
 624:	44 80 00 0b 	be r4,r0,650 <uart_putstr+0x30>
 628:	78 02 00 00 	mvhi r2,0x0
 62c:	38 42 0a 6c 	ori r2,r2,0xa6c
 630:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 634:	28 62 00 00 	lw r2,(r3+0)
 638:	20 42 00 10 	andi r2,r2,0x10
 63c:	5c 40 ff fe 	bne r2,r0,634 <uart_putstr+0x14>
	uart0->rxtx = c;
 640:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
 644:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 648:	40 24 00 00 	lbu r4,(r1+0)
 64c:	5c 82 ff fa 	bne r4,r2,634 <uart_putstr+0x14>
 650:	c3 a0 00 00 	ret

00000654 <gpio_get_in1>:
/*******************************************************************************
 GPIO funciones primitivas
*/

char gpio_get_in1(){
	return gpio0->in1;
 654:	78 01 00 00 	mvhi r1,0x0
 658:	38 21 0a 74 	ori r1,r1,0xa74
 65c:	28 21 00 00 	lw r1,(r1+0)
 660:	28 21 00 00 	lw r1,(r1+0)
}
 664:	20 21 00 ff 	andi r1,r1,0xff
 668:	c3 a0 00 00 	ret

0000066c <gpio_get_in2>:

char gpio_get_in2(){
	return gpio0->in2;
 66c:	78 01 00 00 	mvhi r1,0x0
 670:	38 21 0a 74 	ori r1,r1,0xa74
 674:	28 21 00 00 	lw r1,(r1+0)
 678:	28 21 00 04 	lw r1,(r1+4)
}
 67c:	20 21 00 ff 	andi r1,r1,0xff
 680:	c3 a0 00 00 	ret

00000684 <gpio_set_out1>:


void gpio_set_out1(char temp1)
{ 
	gpio0->out1=temp1;
 684:	78 02 00 00 	mvhi r2,0x0
 688:	38 42 0a 74 	ori r2,r2,0xa74
 68c:	28 42 00 00 	lw r2,(r2+0)
	return gpio0->in2;
}


void gpio_set_out1(char temp1)
{ 
 690:	20 21 00 ff 	andi r1,r1,0xff
	gpio0->out1=temp1;
 694:	58 41 00 08 	sw (r2+8),r1
 }
 698:	c3 a0 00 00 	ret

0000069c <gpio_set_out2>:

void gpio_set_out2(char temp2){

	gpio0->out2=temp2;
 69c:	78 02 00 00 	mvhi r2,0x0
 6a0:	38 42 0a 74 	ori r2,r2,0xa74
 6a4:	28 42 00 00 	lw r2,(r2+0)
void gpio_set_out1(char temp1)
{ 
	gpio0->out1=temp1;
 }

void gpio_set_out2(char temp2){
 6a8:	20 21 00 ff 	andi r1,r1,0xff

	gpio0->out2=temp2;
 6ac:	58 41 00 0c 	sw (r2+12),r1
}
 6b0:	c3 a0 00 00 	ret

000006b4 <gpio_set_dir1>:

void gpio_set_dir1(char temp3)
{  
	gpio0->dir1=temp3;
 6b4:	78 02 00 00 	mvhi r2,0x0
 6b8:	38 42 0a 74 	ori r2,r2,0xa74
 6bc:	28 42 00 00 	lw r2,(r2+0)

	gpio0->out2=temp2;
}

void gpio_set_dir1(char temp3)
{  
 6c0:	20 21 00 ff 	andi r1,r1,0xff
	gpio0->dir1=temp3;
 6c4:	58 41 00 10 	sw (r2+16),r1
}
 6c8:	c3 a0 00 00 	ret

000006cc <gpio_set_dir2>:

void gpio_set_dir2(char temp4){

	gpio0->dir2=temp4;
 6cc:	78 02 00 00 	mvhi r2,0x0
 6d0:	38 42 0a 74 	ori r2,r2,0xa74
 6d4:	28 42 00 00 	lw r2,(r2+0)
void gpio_set_dir1(char temp3)
{  
	gpio0->dir1=temp3;
}

void gpio_set_dir2(char temp4){
 6d8:	20 21 00 ff 	andi r1,r1,0xff

	gpio0->dir2=temp4;
 6dc:	58 41 00 14 	sw (r2+20),r1
}
 6e0:	c3 a0 00 00 	ret

000006e4 <spi_Writte>:
*/



void spi_Writte(char adrr,char value){
	spi0->adressWritte=adrr;
 6e4:	78 03 00 00 	mvhi r3,0x0
 6e8:	38 63 0a 78 	ori r3,r3,0xa78
 6ec:	28 63 00 00 	lw r3,(r3+0)
SPI
*/



void spi_Writte(char adrr,char value){
 6f0:	20 21 00 ff 	andi r1,r1,0xff
 6f4:	20 42 00 ff 	andi r2,r2,0xff
	spi0->adressWritte=adrr;
 6f8:	58 61 00 0c 	sw (r3+12),r1
	spi0->byteTowritte=value;
 6fc:	58 62 00 10 	sw (r3+16),r2
	while((spi0->statusWritte)==0x01);
 700:	34 02 00 01 	mvi r2,1
 704:	28 61 00 04 	lw r1,(r3+4)
 708:	44 22 ff ff 	be r1,r2,704 <spi_Writte+0x20>
}
 70c:	c3 a0 00 00 	ret

00000710 <spi_read>:
char spi_read(char Addr){
	spi0->adressRead=Addr;
 710:	78 02 00 00 	mvhi r2,0x0
 714:	38 42 0a 78 	ori r2,r2,0xa78
 718:	28 42 00 00 	lw r2,(r2+0)
void spi_Writte(char adrr,char value){
	spi0->adressWritte=adrr;
	spi0->byteTowritte=value;
	while((spi0->statusWritte)==0x01);
}
char spi_read(char Addr){
 71c:	20 21 00 ff 	andi r1,r1,0xff
	spi0->adressRead=Addr;
	while((spi0->statusRead)==0x01);
 720:	34 03 00 01 	mvi r3,1
	spi0->adressWritte=adrr;
	spi0->byteTowritte=value;
	while((spi0->statusWritte)==0x01);
}
char spi_read(char Addr){
	spi0->adressRead=Addr;
 724:	58 41 00 14 	sw (r2+20),r1
	while((spi0->statusRead)==0x01);
 728:	28 41 00 08 	lw r1,(r2+8)
 72c:	44 23 ff ff 	be r1,r3,728 <spi_read+0x18>
	return spi0->Readed;
 730:	28 41 00 00 	lw r1,(r2+0)
}
 734:	20 21 00 ff 	andi r1,r1,0xff
 738:	c3 a0 00 00 	ret

0000073c <SPI_begin>:
void SPI_begin(){
	spi0->begin=0x01;
 73c:	78 01 00 00 	mvhi r1,0x0
 740:	38 21 0a 78 	ori r1,r1,0xa78
 744:	28 21 00 00 	lw r1,(r1+0)
 748:	34 02 00 01 	mvi r2,1
 74c:	58 22 00 18 	sw (r1+24),r2
}
 750:	c3 a0 00 00 	ret

00000754 <spi_setDiv>:

void spi_setDiv(char f){
	spi0->divisor=f;
 754:	78 02 00 00 	mvhi r2,0x0
 758:	38 42 0a 78 	ori r2,r2,0xa78
 75c:	28 42 00 00 	lw r2,(r2+0)
}
void SPI_begin(){
	spi0->begin=0x01;
}

void spi_setDiv(char f){
 760:	20 21 00 ff 	andi r1,r1,0xff
	spi0->divisor=f;
 764:	58 41 00 1c 	sw (r2+28),r1
}
 768:	c3 a0 00 00 	ret

0000076c <I2CstartCond>:
Stop"BOTH"
ByteReaded"READ"
ByteToWrite"WRITE
*/
void I2CstartCond(){
	i2c0->StartCond=0x01;
 76c:	78 01 00 00 	mvhi r1,0x0
 770:	38 21 0a 7c 	ori r1,r1,0xa7c
 774:	28 22 00 00 	lw r2,(r1+0)
 778:	34 01 00 01 	mvi r1,1
	while((i2c0->StartCond)==0x01);
 77c:	34 03 00 01 	mvi r3,1
Stop"BOTH"
ByteReaded"READ"
ByteToWrite"WRITE
*/
void I2CstartCond(){
	i2c0->StartCond=0x01;
 780:	58 41 00 00 	sw (r2+0),r1
	while((i2c0->StartCond)==0x01);
 784:	28 41 00 00 	lw r1,(r2+0)
 788:	44 23 ff ff 	be r1,r3,784 <I2CstartCond+0x18>
	
}
 78c:	c3 a0 00 00 	ret

00000790 <I2CStopCond>:
void I2CStopCond(){
	i2c0->Stop=0x01;
 790:	78 01 00 00 	mvhi r1,0x0
 794:	38 21 0a 7c 	ori r1,r1,0xa7c
 798:	28 22 00 00 	lw r2,(r1+0)
 79c:	34 01 00 01 	mvi r1,1
	while((i2c0->Stop)==0x01);
 7a0:	34 03 00 01 	mvi r3,1
	i2c0->StartCond=0x01;
	while((i2c0->StartCond)==0x01);
	
}
void I2CStopCond(){
	i2c0->Stop=0x01;
 7a4:	58 41 00 10 	sw (r2+16),r1
	while((i2c0->Stop)==0x01);
 7a8:	28 41 00 10 	lw r1,(r2+16)
 7ac:	44 23 ff ff 	be r1,r3,7a8 <I2CStopCond+0x18>
}
 7b0:	c3 a0 00 00 	ret

000007b4 <I2CWriteBytePointer>:
void I2CWriteBytePointer(char Val){
	//this funtion is for to leave ACK most longer and generate the peek in data sheet for ads1115
	i2c0->ByteToWrite=Val;
 7b4:	78 02 00 00 	mvhi r2,0x0
 7b8:	38 42 0a 7c 	ori r2,r2,0xa7c
 7bc:	28 42 00 00 	lw r2,(r2+0)
}
void I2CStopCond(){
	i2c0->Stop=0x01;
	while((i2c0->Stop)==0x01);
}
void I2CWriteBytePointer(char Val){
 7c0:	20 21 00 ff 	andi r1,r1,0xff
	//this funtion is for to leave ACK most longer and generate the peek in data sheet for ads1115
	i2c0->ByteToWrite=Val;
	i2c0->Potiner=0x01;
	while((i2c0->Potiner)==0x01);
 7c4:	34 03 00 01 	mvi r3,1
	i2c0->Stop=0x01;
	while((i2c0->Stop)==0x01);
}
void I2CWriteBytePointer(char Val){
	//this funtion is for to leave ACK most longer and generate the peek in data sheet for ads1115
	i2c0->ByteToWrite=Val;
 7c8:	58 41 00 18 	sw (r2+24),r1
	i2c0->Potiner=0x01;
 7cc:	34 01 00 01 	mvi r1,1
 7d0:	58 41 00 08 	sw (r2+8),r1
	while((i2c0->Potiner)==0x01);
 7d4:	28 41 00 08 	lw r1,(r2+8)
 7d8:	44 23 ff ff 	be r1,r3,7d4 <I2CWriteBytePointer+0x20>
	
}
 7dc:	c3 a0 00 00 	ret

000007e0 <I2CWriteByte>:
void I2CWriteByte(char Value){
 7e0:	37 9c ff f8 	addi sp,sp,-8
 7e4:	5b 8b 00 08 	sw (sp+8),r11
 7e8:	5b 9d 00 04 	sw (sp+4),ra
 7ec:	20 2b 00 ff 	andi r11,r1,0xff
	nsleep(500);//may be don't past through mid low and have to be a delay
 7f0:	34 01 01 f4 	mvi r1,500
 7f4:	fb ff ff 55 	calli 548 <nsleep>
	i2c0->ByteToWrite=Value;
 7f8:	78 02 00 00 	mvhi r2,0x0
 7fc:	38 42 0a 7c 	ori r2,r2,0xa7c
 800:	28 42 00 00 	lw r2,(r2+0)
	i2c0->Write=0x01;
 804:	34 01 00 01 	mvi r1,1
	while((i2c0->Write)==0x01);
 808:	34 03 00 01 	mvi r3,1
	while((i2c0->Potiner)==0x01);
	
}
void I2CWriteByte(char Value){
	nsleep(500);//may be don't past through mid low and have to be a delay
	i2c0->ByteToWrite=Value;
 80c:	58 4b 00 18 	sw (r2+24),r11
	i2c0->Write=0x01;
 810:	58 41 00 04 	sw (r2+4),r1
	while((i2c0->Write)==0x01);
 814:	28 41 00 04 	lw r1,(r2+4)
 818:	44 23 ff ff 	be r1,r3,814 <I2CWriteByte+0x34>
	
}
 81c:	2b 9d 00 04 	lw ra,(sp+4)
 820:	2b 8b 00 08 	lw r11,(sp+8)
 824:	37 9c 00 08 	addi sp,sp,8
 828:	c3 a0 00 00 	ret

0000082c <I2CReadByte>:
char I2CReadByte(){
 82c:	37 9c ff fc 	addi sp,sp,-4
 830:	5b 9d 00 04 	sw (sp+4),ra
	nsleep(500);//may be don't past through mid low and have to be a delay
 834:	34 01 01 f4 	mvi r1,500
 838:	fb ff ff 44 	calli 548 <nsleep>
	i2c0->Read=0x01;
 83c:	78 01 00 00 	mvhi r1,0x0
 840:	38 21 0a 7c 	ori r1,r1,0xa7c
 844:	28 22 00 00 	lw r2,(r1+0)
 848:	34 01 00 01 	mvi r1,1
	while((i2c0->Read)==0x01);
 84c:	34 03 00 01 	mvi r3,1
	while((i2c0->Write)==0x01);
	
}
char I2CReadByte(){
	nsleep(500);//may be don't past through mid low and have to be a delay
	i2c0->Read=0x01;
 850:	58 41 00 0c 	sw (r2+12),r1
	while((i2c0->Read)==0x01);
 854:	28 41 00 0c 	lw r1,(r2+12)
 858:	44 23 ff ff 	be r1,r3,854 <I2CReadByte+0x28>
	return i2c0->ByteReaded;
 85c:	28 41 00 14 	lw r1,(r2+20)
	
}
 860:	20 21 00 ff 	andi r1,r1,0xff
 864:	2b 9d 00 04 	lw ra,(sp+4)
 868:	37 9c 00 04 	addi sp,sp,4
 86c:	c3 a0 00 00 	ret

00000870 <SetDisplay>:
/****************************************************************************
Display 
*/


void SetDisplay(char Display,char value){
 870:	20 21 00 ff 	andi r1,r1,0xff
	switch(Display){
 874:	34 03 00 08 	mvi r3,8
/****************************************************************************
Display 
*/


void SetDisplay(char Display,char value){
 878:	20 42 00 ff 	andi r2,r2,0xff
	switch(Display){
 87c:	54 23 00 07 	bgu r1,r3,898 <SetDisplay+0x28>
 880:	3c 21 00 02 	sli r1,r1,2
 884:	78 03 00 00 	mvhi r3,0x0
 888:	38 63 0a 24 	ori r3,r3,0xa24
 88c:	b4 61 18 00 	add r3,r3,r1
 890:	28 61 00 00 	lw r1,(r3+0)
 894:	c0 20 00 00 	b r1
	   break;
	   case 0x08:
		Display0->bcd8=value;
	   break;
	   default:
		Display0->bcd1=value;
 898:	78 01 00 00 	mvhi r1,0x0
 89c:	38 21 0a 80 	ori r1,r1,0xa80
 8a0:	28 21 00 00 	lw r1,(r1+0)
 8a4:	58 22 00 00 	sw (r1+0),r2
 8a8:	c3 a0 00 00 	ret
	   break;
	   case 0x06:
		Display0->bcd6=value;
	   break;
	   case 0x07:
		Display0->bcd7=value;
 8ac:	78 01 00 00 	mvhi r1,0x0
 8b0:	38 21 0a 80 	ori r1,r1,0xa80
 8b4:	28 21 00 00 	lw r1,(r1+0)
 8b8:	58 22 00 18 	sw (r1+24),r2
	   break;
 8bc:	c3 a0 00 00 	ret
	   case 0x08:
		Display0->bcd8=value;
 8c0:	78 01 00 00 	mvhi r1,0x0
 8c4:	38 21 0a 80 	ori r1,r1,0xa80
 8c8:	28 21 00 00 	lw r1,(r1+0)
 8cc:	58 22 00 1c 	sw (r1+28),r2
	   break;
 8d0:	c3 a0 00 00 	ret
	switch(Display){
	   case 0x01:
		Display0->bcd1=value;
	   break;
	   case 0x02:
		Display0->bcd2=value;;
 8d4:	78 01 00 00 	mvhi r1,0x0
 8d8:	38 21 0a 80 	ori r1,r1,0xa80
 8dc:	28 21 00 00 	lw r1,(r1+0)
 8e0:	58 22 00 04 	sw (r1+4),r2
	   break;
 8e4:	c3 a0 00 00 	ret
	   case 0x03:
		Display0->bcd3=value;
 8e8:	78 01 00 00 	mvhi r1,0x0
 8ec:	38 21 0a 80 	ori r1,r1,0xa80
 8f0:	28 21 00 00 	lw r1,(r1+0)
 8f4:	58 22 00 08 	sw (r1+8),r2
	   break;
 8f8:	c3 a0 00 00 	ret
	   case 0x04:
		Display0->bcd4=value;
 8fc:	78 01 00 00 	mvhi r1,0x0
 900:	38 21 0a 80 	ori r1,r1,0xa80
 904:	28 21 00 00 	lw r1,(r1+0)
 908:	58 22 00 0c 	sw (r1+12),r2
	   break;
 90c:	c3 a0 00 00 	ret
	   case 0x05:
		Display0->bcd5=value;
 910:	78 01 00 00 	mvhi r1,0x0
 914:	38 21 0a 80 	ori r1,r1,0xa80
 918:	28 21 00 00 	lw r1,(r1+0)
 91c:	58 22 00 10 	sw (r1+16),r2
	   break;
 920:	c3 a0 00 00 	ret
	   case 0x06:
		Display0->bcd6=value;
 924:	78 01 00 00 	mvhi r1,0x0
 928:	38 21 0a 80 	ori r1,r1,0xa80
 92c:	28 21 00 00 	lw r1,(r1+0)
 930:	58 22 00 14 	sw (r1+20),r2
	   break;
 934:	c3 a0 00 00 	ret

00000938 <SetDpDisplay>:
	   break;
	}

}

void SetDpDisplay(char display){
 938:	20 21 00 ff 	andi r1,r1,0xff

	switch(display){
 93c:	34 02 00 08 	mvi r2,8
 940:	54 22 00 0c 	bgu r1,r2,970 <SetDpDisplay+0x38>
 944:	3c 21 00 02 	sli r1,r1,2
 948:	78 02 00 00 	mvhi r2,0x0
 94c:	38 42 0a 48 	ori r2,r2,0xa48
 950:	b4 41 10 00 	add r2,r2,r1
 954:	28 41 00 00 	lw r1,(r2+0)
 958:	c0 20 00 00 	b r1
	   break;
	   case 0x07:
		Display0->point=0xFD;
	   break;
	   case 0x08:
		Display0->point=0xFE;
 95c:	78 01 00 00 	mvhi r1,0x0
 960:	38 21 0a 80 	ori r1,r1,0xa80
 964:	28 21 00 00 	lw r1,(r1+0)
 968:	34 02 00 fe 	mvi r2,254
 96c:	58 22 00 20 	sw (r1+32),r2
 970:	c3 a0 00 00 	ret

void SetDpDisplay(char display){

	switch(display){
	   case 0x01:
		Display0->point=0x7F;
 974:	78 01 00 00 	mvhi r1,0x0
 978:	38 21 0a 80 	ori r1,r1,0xa80
 97c:	28 21 00 00 	lw r1,(r1+0)
 980:	34 02 00 7f 	mvi r2,127
 984:	58 22 00 20 	sw (r1+32),r2
	   break;
 988:	c3 a0 00 00 	ret
	   case 0x02:
		Display0->point=0xBF;
 98c:	78 01 00 00 	mvhi r1,0x0
 990:	38 21 0a 80 	ori r1,r1,0xa80
 994:	28 21 00 00 	lw r1,(r1+0)
 998:	34 02 00 bf 	mvi r2,191
 99c:	58 22 00 20 	sw (r1+32),r2
	   break;
 9a0:	c3 a0 00 00 	ret
	   case 0x03:
		Display0->point=0xDF;
 9a4:	78 01 00 00 	mvhi r1,0x0
 9a8:	38 21 0a 80 	ori r1,r1,0xa80
 9ac:	28 21 00 00 	lw r1,(r1+0)
 9b0:	34 02 00 df 	mvi r2,223
 9b4:	58 22 00 20 	sw (r1+32),r2
	   break;
 9b8:	c3 a0 00 00 	ret
	   case 0x04:
		Display0->point=0xEF;
 9bc:	78 01 00 00 	mvhi r1,0x0
 9c0:	38 21 0a 80 	ori r1,r1,0xa80
 9c4:	28 21 00 00 	lw r1,(r1+0)
 9c8:	34 02 00 ef 	mvi r2,239
 9cc:	58 22 00 20 	sw (r1+32),r2
	   break;
 9d0:	c3 a0 00 00 	ret
	   case 0x05:
		Display0->point=0xF7;
 9d4:	78 01 00 00 	mvhi r1,0x0
 9d8:	38 21 0a 80 	ori r1,r1,0xa80
 9dc:	28 21 00 00 	lw r1,(r1+0)
 9e0:	34 02 00 f7 	mvi r2,247
 9e4:	58 22 00 20 	sw (r1+32),r2
	   break;
 9e8:	c3 a0 00 00 	ret
	   case 0x06:
		Display0->point=0xFB;
 9ec:	78 01 00 00 	mvhi r1,0x0
 9f0:	38 21 0a 80 	ori r1,r1,0xa80
 9f4:	28 21 00 00 	lw r1,(r1+0)
 9f8:	34 02 00 fb 	mvi r2,251
 9fc:	58 22 00 20 	sw (r1+32),r2
	   break;
 a00:	c3 a0 00 00 	ret
	   case 0x07:
		Display0->point=0xFD;
 a04:	78 01 00 00 	mvhi r1,0x0
 a08:	38 21 0a 80 	ori r1,r1,0xa80
 a0c:	28 21 00 00 	lw r1,(r1+0)
 a10:	34 02 00 fd 	mvi r2,253
 a14:	58 22 00 20 	sw (r1+32),r2
	   break;
 a18:	c3 a0 00 00 	ret
