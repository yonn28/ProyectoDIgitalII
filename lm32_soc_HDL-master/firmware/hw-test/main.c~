/**
 * 
 */

#include "soc-hw.h"


int main()
{
	/*
	char a;
	while(1){
		a=uart_getchar();
		uart_putchar(a);

	}
	*/
	/*
	char name;
	while(1){
		name=uart_getchar();
 		switch (name){
		 case'n':
			uart_putstr("james");
			break;
		case'p':
			uart_putstr( "rodig");
			break;
		case'c':
			uart_putstr( "5461561165");
			break;

		}
			
	}
	*/
//---------------------------------------------------------------------------	
	//gpio_set_dir(0xFF);//uncomented in order to use blink




	
	/*
	// blink works
	unsigned  int  time;
	unsigned  int time2;

	while(1){
		
		for(time=50000; time>0; time--){gpio_set_out(0xFF);}
		for(time2=50000; time2>0; time2--){gpio_set_out(0x00);}
	}
	*/
	/*
	unsigned  int  time;
	while(1){
		for(time=500000; time>0; time--){gpio_set_out(0x01);}
		for(time=500000; time>0; time--){gpio_set_out(0x02);}
		for(time=500000; time>0; time--){gpio_set_out(0x04);}
		for(time=500000; time>0; time--){gpio_set_out(0x08);}
		for(time=500000; time>0; time--){gpio_set_out(0x10);}
		for(time=500000; time>0; time--){gpio_set_out(0x20);}
		for(time=500000; time>0; time--){gpio_set_out(0x40);}
		for(time=500000; time>0; time--){gpio_set_out(0x80);}

	}
	*/
	/*
	char name;
	while(1){
		name=uart_getchar();
 		switch (name){
		case'a':
			gpio_set_out(0x01);
			break;
		case's':
			gpio_set_out(0x02);
			break;
		case'd':
			gpio_set_out(0x04);
			break;
		case'f':
			gpio_set_out(0x08);
			break;
		case'g':
			gpio_set_out(0x10);
			break;
		case'h':
			gpio_set_out(0x20);
			break;
		case'j':
			gpio_set_out(0x40);
			break;
		case'k':
			gpio_set_out(0x80);
			break;
		default:
			uart_putstr( "invalido");
			break;			

		}
		name=name;
	}
	*/		
//-----------------------------------------------------------------------------	
/*
	gpio_set_dir(0xF0);
	
	char b;
	char output;

	while(1){
	output=(gpio_get_in());
	b=output<<4;	
	gpio_set_out(b);

	}
	*/
//--------------------------------------------------------------------
//spi TEST 
	/*	
   	char b;
	spi_setDiv(0x05);
	spi_set_CS(0x01);
	spi_send(0x64);
	b=spi_getChar();
	spi_send(b);

	*/
	//this spi works !! temperature
	
	/************************///works keep it going
	/*
	gpio_set_dir1(0xFF);
	gpio_set_dir2(0xFF);
	SPI_begin();
	spi_Writte(0x80,0xE6);
	while(1){
		char a=spi_read(0x02);// most significative bite
		gpio_set_out1(a);
		char b=spi_read(0x01);
		gpio_set_out2(b);
	}
	*/
//-----------------------------------------------------------
//analog converter test works!!
	/*
	gpio_set_dir1(0xFF);
	gpio_set_dir2(0xFF);
	while(1){
		ReadChanel(0x00);	
		char c=GetByteOne();//most significative
		gpio_set_out2(c);//most significative Bit is V11 pin Give Coherence
		char d=GetByteTwo();//less significative Bit
		gpio_set_out1(d);//most significative bit is u16

	}//
	*/

//********************************************************************/
	
//test Display works!!
	/*

	SetDisplay(0x01,0x01);
	SetDisplay(0x02,0x02);
	SetDisplay(0x03,0x03);
	SetDisplay(0x04,0x04);
	SetDisplay(0x05,0x05);
	SetDisplay(0x06,0x06);
	SetDisplay(0x07,0x07);
	SetDisplay(0x08,0x08);
		

	*/
/***********************************************************************/
	//tests with UART
	/*
	gpio_set_dir1(0xFF);
	gpio_set_dir2(0xFF);
	*/
			/*
		ReadChanel(0x00);	
		char c=GetByteOne();
		gpio_set_out2(c);
		char d=GetByteTwo();
		gpio_set_out1(d);
		*/	
	/*
	int increaser=35;

	
	while(1){

		uart_putchar(0x30);//UART SIMBOL 0
		uart_putchar(0x31);//UART SIMBOL 1
		uart_putchar(0x32);//UART SIMBOL 2
		uart_putchar(0x33);//UART SIMBOL 3
		uart_putchar(0x34);//UART SIMBOL 4
		uart_putchar(0x35);//UART SIMBOL 5
		uart_putchar(0x36);//UART SIMBOL 6
		uart_putchar(0x37);//UART SIMBOL 7
		uart_putchar(0x38);//UART SIMBOL 8
		uart_putchar(0x39);//UART SIMBOL 9
		//uart_putchar(0x2B);//salto hacia arriba
		
		//uart_putchar(0x0B);//simbolo +
		//uart_putchar(0x10);
		

		uart_putchar(0x41);//UART A
		uart_putchar(0x42);//UART B
		uart_putchar(0x43);//UART C
		uart_putchar(0x44);//UART D
		uart_putchar(0x45);//UART E
		uart_putchar(0x46);//UART F
		uart_putchar(0x47);//UART G
		uart_putchar(0x48);//UART H
		uart_putchar(0x49);//UART I
		uart_putchar(0x4A);//UART J
		uart_putchar(0x4B);//UART K
		uart_putchar(0x4C);//UART L
		uart_putchar(0x4D);//UART M
		uart_putchar(0x4E);//UART N
		uart_putchar(0x4F);//UART O
		uart_putchar(0x50);//UART P
		uart_putchar(0x51);//UART Q	
		uart_putchar(0x52);//UART R
		uart_putchar(0x53);//UART S
		uart_putchar(0x54);//UART T
		uart_putchar(0x55);//UART U
		uart_putchar(0x56);//UART V
		uart_putchar(0x57);//UART W
		uart_putchar(0x58);//UART X
		uart_putchar(0x59);//UART Y
		uart_putchar(0x5A);//UART Z	

		uart_putchar(0x0A);//supouse skip line
		int i;
		while(i<increaser){
			i=i+1;
			uart_putchar(0x08);//retroceso
		}
		i=0;
		increaser=increaser+1;
		
	}
	*/

//**********************************************************/
//multiple tests 

	/*
	char value=95;
	char module=value%10;
	char divition=value/10;
	SetDisplay(0x01,module);
	SetDisplay(0x02,divition);	
	*/
 
	
	/*
	// interruptions 
	gpio_set_dir1(0xFF);
	gpio_set_dir2(0xFF);
	SetDpDisplay(0x04);
	
	
	irq_enable();
	irq_set_mask(0x02);
	tic_init(); //works stay there
	
	while(1){
		ReadChanel(0x00);	
		char c=GetByteOne();//most significative
		uart_putchar(c);
		//msleep(100);
		
		
		gpio_set_out2(c);//most significative Bit is V11 pin Give Coherence
		SetDisplay(0x04,c%10);
		SetDisplay(0x05,c/10);
		SetDisplay(0x06,c/100);
				
		
		char d=GetByteTwo();//less significative Bit
		uart_putchar(d);
		
		
		
		gpio_set_out1(d);//most significative bit is u16	
		SetDisplay(0x01,d%10);
		SetDisplay(0x02,d/10);		
		SetDisplay(0x03,d/100);

	}//
*/	


/*




// I2C general Works

/*
	gpio_set_dir1(0xFF);
	gpio_set_dir2(0xFF);
	SetDpDisplay(0x04);
	while(1){
			
		I2CstartCond();//Start
		I2CWriteBytePointer(0x90);//Slave Address
		I2CWriteByte(0x01);//Configuration Register
		I2CWriteByte(0xC3);//configuration Byte One (chanel zero)
		//I2CWriteByte(0xD3);//configuration Byte One (chanel one)
		//I2CWriteByte(0xE3);//configuration Byte One (chanel Two)
		//I2CWriteByte(0xF3);//configuration Byte One  (chanel Three)
		I2CWriteByte(0x83);//configuration Byte Two
		I2CStopCond();//Stop 
		nsleep(500);//bus free
		I2CstartCond();//Start
		I2CWriteBytePointer(0x90);//Slave Address
		I2CWriteByte(0x00);//convertion Register
		I2CStopCond();//Stop
		I2CstartCond();//Start	
		I2CWriteByte(0x91);//Slave Address With r/w in one	
		char c=I2CReadByte();//most Significative
		char d=I2CReadByte();//less Signinificative
		I2CStopCond();//Start
		
	


		gpio_set_out2(c);//most significative Bit is V11 pin Give Coherenc
		gpio_set_out1(d);//less significative bit is u1

		uint32_t value2=d + ((uint32_t)c<<8);
		uint32_t value = value2; 

		SetDisplay(0x01,value2%10);
		value2 = value2/10;
		SetDisplay(0x02,value2%10);
		value2 = value2/10;
		SetDisplay(0x03,value2%10);
		value2 = value2/10;
		SetDisplay(0x04,value2%10);
		value2 = value2/10;
		SetDisplay(0x05,value2%10);
		value2 = value2/10;
		SetDisplay(0x06,value2%10);
	}
*/
/*
//SPI Temperature

	gpio_set_dir1(0xFF);
	gpio_set_dir2(0xFF);
	SetDpDisplay(0x04);
	SPI_begin();
	spi_Writte(0x80,0xE6);
	while(1){
		char a=spi_read(0x02);// most significative bite 
		gpio_set_out2(a);
		char b=spi_read(0x01);
		gpio_set_out1(b);//decimal part
		d=((uint32_t)b>>5)*125;
		
		SetDisplay(0x01,d%10);
		d = d/10;
		SetDisplay(0x02,d%10);
		d = d/10;
		SetDisplay(0x03,d%10);
		d = d/10;
		SetDisplay(0x04,a%10);
		a = a/10;
		SetDisplay(0x05,a%10);
		a = a/10;
		SetDisplay(0x06,a%10);
	}
*/
//test with UART web page ALL proyect less Xbee

	gpio_set_dir1(0xFF);
	gpio_set_dir2(0xFF);
	SetDpDisplay(0x04);
	SPI_begin();
	spi_Writte(0x80,0xE6);

	while(1){
			
		I2CstartCond();//Start
		I2CWriteBytePointer(0x90);//Slave Address
		I2CWriteByte(0x01);//Configuration Register
		I2CWriteByte(0xC3);//configuration Byte One (chanel zero)
		//I2CWriteByte(0xD3);//configuration Byte One (chanel one)
		//I2CWriteByte(0xE3);//configuration Byte One (chanel Two)
		//I2CWriteByte(0xF3);//configuration Byte One  (chanel Three)
		I2CWriteByte(0x83);//configuration Byte Two
		I2CStopCond();//Stop 
		nsleep(500);//bus free
		I2CstartCond();//Start
		I2CWriteBytePointer(0x90);//Slave Address
		I2CWriteByte(0x00);//convertion Register
		I2CStopCond();//Stop
		I2CstartCond();//Start	
		I2CWriteByte(0x91);//Slave Address With r/w in one	
		char c=I2CReadByte();//most Significative
		char d=I2CReadByte();//less Signinificative
		I2CStopCond();//Start
		
		uart_putchar(0x61);
		uart_putchar(0x62);//Page Rigidez MOSTSIG
		uart_putchar(c);

		uart_putchar(0x61);
		uart_putchar(0x63);//Page Rigidez LessSignificative
		uart_putchar(d);


		//gpio_set_out2(c);//most significative Bit is V11 pin Give Coherenc
		//gpio_set_out1(d);//less significative bit is u1

		uint32_t value=d + ((uint32_t)c<<8);
		uint32_t value2 = value; 

		SetDisplay(0x01,value2%10);
		value2 = value2/10;
		SetDisplay(0x02,value2%10);
		value2 = value2/10;
		SetDisplay(0x03,value2%10);
		value2 = value2/10;
		SetDisplay(0x04,value2%10);
		value2 = value2/10;
		SetDisplay(0x05,value2%10);
		value2 = value2/10;
		SetDisplay(0x06,value2%10);

		I2CstartCond();//Start
		I2CWriteBytePointer(0x90);//Slave Address
		I2CWriteByte(0x01);//Configuration Register
		//I2CWriteByte(0xC3);//configuration Byte One (chanel zero)
		I2CWriteByte(0xD3);//configuration Byte One (chanel one)
		//I2CWriteByte(0xE3);//configuration Byte One (chanel Two)
		//I2CWriteByte(0xF3);//configuration Byte One  (chanel Three)
		I2CWriteByte(0x83);//configuration Byte Two
		I2CStopCond();//Stop 
		nsleep(500);//bus free
		I2CstartCond();//Start
		I2CWriteBytePointer(0x90);//Slave Address
		I2CWriteByte(0x00);//convertion Register
		I2CStopCond();//Stop
		I2CstartCond();//Start	
		I2CWriteByte(0x91);//Slave Address With r/w in one	
		char f=I2CReadByte();//most Significative
		char g=I2CReadByte();//less Signinificative
		I2CStopCond();//Start

		gpio_set_out2(f);//most significative Bit is V11 pin Give Coherenc
		gpio_set_out1(g);//less significative bit is u1

		uart_putchar(0x61);
		uart_putchar(0x64);//Page Pulso MOSTSIG
		uart_putchar(f);

		uart_putchar(0x61);
		uart_putchar(0x65);//Page Pulso Less Significative
		uart_putchar(g);


		char a=spi_read(0x02);// most significative byte Temperature
		char b=spi_read(0x01);//read the float part in ds1722
	
		uart_putchar(0x61);
		uart_putchar(0x66);//Page integer Tempetarure
		uart_putchar(a);

		uart_putchar(0x61);
		uart_putchar(0x67);//Page float Tempetarure
		uart_putchar(b);

	}

}




